from pennylane import numpy as np
import pennylane as qml
from pennylane.optimize import NesterovMomentumOptimizer
import matplotlib.pyplot as plt
from joblib import Parallel, delayed

TOTAL_WIRES = 4
TRAINABLE_WIRES = 2

class Model:
    dev4 = qml.device("default.qubit", wires=4)
    dev2 = qml.device("default.qubit", wires=2)
    def __init__(self, wires, batch_size):
        '''
        4 + 2 qubit system
        '''
        self.weights = 3.14 * np.random.rand(18, requires_grad=True)
        self.bias = np.array(0.0, requires_grad=True)
        self.optimizer = NesterovMomentumOptimizer(0.5)
        self.batch_size = batch_size
    

    @qml.qnode(dev4)
    def ckt1(x, theta):
        data = [0, 1, 2, 3]
        qml.AmplitudeEmbedding(x, wires=data, normalize=True)

        for i in data: qml.Hadamard(i)
        qml.RX(theta[0], wires=[0])
        qml.CNOT([0, 2])
        qml.RZ(theta[1], wires=[1])
        qml.CNOT([1, 3])
        qml.RX(theta[2], wires=[2])
        qml.CNOT([2, 3])
        qml.RX(theta[3], wires=[3])

        return [qml.expval(qml.PauliZ(i)) for i in range(4)]

    @qml.qnode(dev2)
    def ckt2(x1, x2, y1, y2, theta):
        qml.RY(np.arccos(x1), wires=0)
        qml.RY(np.arccos(x2), wires=1)

        qml.RX(np.arcsin(y1), wires=0)
        qml.RX(np.arcsin(y2), wires=1)

        # variational part
        qml.Rot(theta[4], theta[5], theta[6], wires=[0])
        qml.CNOT([0, 1])
        qml.Rot(theta[7], theta[8], theta[9], wires=[1])
        qml.CNOT([1, 0])
        
        return qml.expval(qml.PauliZ(1))

    def circuit(x, theta):

        x1, x2, x3, x4 = Model.ckt1(x, theta)

        # synthetic superpose
        # sqrt((1 + x1) / 2) = abs(a1)
        xx1 = (theta[10] * np.sqrt((1 + x1) / 2) + theta[11] * np.sqrt((1 + x3) / 2)) * 0.1
        xx2 = (theta[12] * np.sqrt((1 + x2) / 2) + theta[13] * np.sqrt((1 + x4) / 2)) * 0.1

        yy1 = (theta[14] * np.sqrt((1 - x1) / 2) + theta[15] * np.sqrt((1 - x3) / 2)) * 0.1
        yy2 = (theta[17] * np.sqrt((1 - x2) / 2) + theta[16] * np.sqrt((1 - x4) / 2)) * 0.1

        return Model.ckt2(xx1, xx2, yy1, yy2, theta)

    def draw(self):
        qml.draw_mpl(Model.circuit)(np.ndarray((64)), np.ndarray((9, 3)))
        plt.show()

    def classif(self, weights, bias, x):
        return ((Model.circuit(x, weights) + bias) + 1) / 2


    def loss(labels, prediction):
        return np.mean((labels - qml.math.stack(prediction))**2)


    def accuracy(labels, prediction):
        tr = lambda x: 1 if x>0.5 else 0
        return np.sum(tr(p) == l for l, p in zip(labels, prediction)) / len(labels)


    def cost(self, weights, bias, X, Y):
        # prediction = list(Parallel(n_jobs=-1)(delayed(self.classif)(weights, bias, x) for x in X))
        prediction = [self.classif(weights, bias, x) for x in X]
        return Model.loss(Y, prediction)


    def train(self, X, Y, epochs=10):
        weights, bias = self.weights, self.bias
        for it in range(epochs):
            batch_index = np.random.randint(0, len(X), (self.batch_size,))
            X_batch = X[batch_index]
            Y_batch = Y[batch_index]
            weights = self.optimizer.step(lambda w: self.cost(w, bias, X_batch, Y_batch), weights)

            predictions = [self.classif(weights, bias, x) for x in X]

            current_cost = self.cost(weights, bias, X, Y)
            acc = Model.accuracy(Y, predictions)
            print(f"Iter: {it+1:4d} | Cost: {current_cost:0.7f} | acc: {acc:0.7f}", flush=True)

----------------------------------------------------------------------------------------------------

size:  12665
Iter:    1 | Cost: 0.2561664 | acc: 0.4676668
Iter:    2 | Cost: 0.2499194 | acc: 0.4676668
Iter:    3 | Cost: 0.2478090 | acc: 0.5323332
Iter:    4 | Cost: 0.2478669 | acc: 0.5323332
Iter:    5 | Cost: 0.2483648 | acc: 0.5323332
Iter:    6 | Cost: 0.2482305 | acc: 0.5323332
Iter:    7 | Cost: 0.2475165 | acc: 0.5323332
Iter:    8 | Cost: 0.2474768 | acc: 0.5323332
Iter:    9 | Cost: 0.2480411 | acc: 0.7213581
Iter:   10 | Cost: 0.2484796 | acc: 0.4976707
Iter:   11 | Cost: 0.2477263 | acc: 0.6979866
Iter:   12 | Cost: 0.2469097 | acc: 0.5323332
Iter:   13 | Cost: 0.2470433 | acc: 0.5323332
Iter:   14 | Cost: 0.2473488 | acc: 0.5323332
Iter:   15 | Cost: 0.2475331 | acc: 0.5323332
Iter:   16 | Cost: 0.2474232 | acc: 0.5323332
Iter:   17 | Cost: 0.2468623 | acc: 0.5323332
Iter:   18 | Cost: 0.2462594 | acc: 0.5323332
Iter:   19 | Cost: 0.2459513 | acc: 0.5323332
Iter:   20 | Cost: 0.2459313 | acc: 0.5323332
Iter:   21 | Cost: 0.2460657 | acc: 0.5590999
Iter:   22 | Cost: 0.2461149 | acc: 0.6843269
Iter:   23 | Cost: 0.2461402 | acc: 0.7384919
Iter:   24 | Cost: 0.2458535 | acc: 0.7092775
Iter:   25 | Cost: 0.2453514 | acc: 0.5503356
Iter:   26 | Cost: 0.2449046 | acc: 0.5323332
Iter:   27 | Cost: 0.2447230 | acc: 0.5323332
Iter:   28 | Cost: 0.2446004 | acc: 0.5323332
